//指针
int i;           //定义整型变量 49 3
int *p;
int a[n];
int *p[n];
int (*p)[n];
int f();
int *p();
int (*p)();
int **p;

//1：变量的访问： 分为直接访问 和 间接访问
//                a = 5;       scanf("%d" , &a); 将变量地址传入

//2： 指针的定义： int* i_Pointer；
//               用来存放变量i的地址： i_Pointer = &i；


//                int* i_Pointer；  这个*是定义这个变量是指针的特征

//                而
//                 scanf("%d" , &a);  取址操作符（取出普通变量a的地址
//                 scanf("%d" , *a);  取值操作符（取出指针变量a保存的地址，该地址存放的值

//        例：
//        pointer_1 = &a;

//        &*pointer_1     ====等于====>     &a
//        *&a   ====等于====>   *pointer_1   ====等于====> a
//        （*pointer_1）++   ====等于====> a++



//3：数组与指针  ：  数组和指针都是指向同一个地址 ， 数组是稳定的。

//                (1):定义一个指向数组元素的指针变量
//                        int a[10]； 定义数组
//                        int* p；

//                (2)p = &a[0];   ===等于====》   p=a;因为在内存中，数组是编译为第一个元素的地址



//                (3)输出数组的元素
//                       1：下标发   a[i]
//                       2: 通过数组名计算数组元素地址，找出元素的值         *(a+i)   首位地址往后移动，移动的位数有创建的类型来决定
//                       3：用指针变量指向数组元素                         p=a;  *（p++);


//               (4)函数参数的定义
//                        f(int arr[] ,int n)  ===编译时等价===>> f(int *arr , int n)


//               (5)指针指向多维数组

//                  1：以二维数组为例

//                  a   =====   *a ===== &a[0] ===== &a[0][0]   均为首位元素的地址
//                  a+1   =====   *（a+1） ===== a[1] ===== &a[1]  ===== &a[1][0]
//                  a+2   =====   *（a+2） ===== a[2] ===== &a[2]  ===== &a[2][0] ===== a[1]+1  ===== *（a+1）+1

//                  多学习  指针表示多维数组

//                  二维数组 类型说明符
//                           （*指针变量名)[长度]  长度表示二维数组分解为多个一维数组时，一维数组的长度，也就是列数


//                            int a[3][4]={...};

//                            int (*p)[4];

//                            p=a;

//                            for(i = 0 ; i <3 ; i++){
//                                for(j=0 ; j<4;j++){
//                                    printf("%2d " , *(*(p+i)+j));           按顺序打印数组a的值
//                                }
//                            }




//字符串与数组
//            1：字符串的定义
//            char string[] = "aaaa";  数组变量存放字符串
//            char* string  = "aaaa";  指针变量存放字符串。字符串存放在常量区，不可以修改

//            2：字符串中字符的存取方法
//            下标法
//            指针法


//指针指向函数
//            一个函数在编译时被分配给一个入口地址，这个地址就称为函数的指针。



//指向函数的指针作为函数的参数：

//返回指针值的函数

            int* a(int x , int y);

//指针函数和函数指针的区别：
//                1：


//指针数组和指向指针的指针（句柄）
//        一个数组里面全是指针
//        int a[3]={1,3,6};
//        int *name[3] = {&a[0] ,&a[1],&a[2]};

//指向字符变量的指针
//        char* name[]={"a","b"};
//        char** p;

//        p = name;

//        printf(" %s\n ",*p);


//void指针  不指定它指向任一类型的数据。只是存放地址，不知道类型
//            任何类型的指针可以赋给void ，void赋给其他类型，需要强转


//const  常量指针是一个固定的指针，不可以修改他的值，但是它指向的数据可以修改














